#!/usr/bin/env node
if (~process.argv.indexOf('--debug')) {
  process.env.DEBUG = 'pnpm:*'
  process.argv.push('--quiet')
}

var debug = require('debug')('pnpm:install')
var dirname = require('path').dirname
var join = require('path').join
var chalk = require('chalk')
var readPkgUp = require('read-pkg-up')
var assign = require('object-assign')

var mkdirp = require('../lib/mkdirp')
var installMultiple = require('../lib/install_multiple')
var Promise = require('../lib/promise')

const cli = require('meow')([
  'Usage:',
  '  $ pnpm install',
  '  $ pnpm install <name>',
  '',
  'Options:',
  '  -S, --save            save into package.json under dependencies',
  '  -D, --save-dev        save into package.json under devDependencies',
  '  -E, --save-exact      save exact spec',
  '',
  '      --dry-run         simulate',
  '  -g, --global          install globally',
  '',
  '      --production      don\'t install devDependencies',
  '      --quiet           don\'t print progress'
].join('\n'), {
  boolean: [
    'save-dev', 'save', 'save-exact', 'dry-run', 'global', 'quiet', 'debug',
  ],
  alias: {
    'no-progress': 'quiet',
    D: 'save-dev',
    S: 'save',
    E: 'save-exact',
    g: 'global'
  }
})

if (cli.flags.debug) {
  cli.flags.quiet = true
}

['saveDev', 'save', 'saveExact', 'dryRun', 'global'].forEach((flag) => {
  if (cli.flags[flag]) {
    console.error("Error: '" + flag + "' is not supported yet, sorry!")
    process.exit(1)
  }
})

var observatory = require('observatory')
observatory.settings({ prefix: '  ', width: 74 })

/*
 * Perform
 */

function run (cli) {
  var ctx = {}
  var pkg

  return readPkgUp()
    .then(pkg_ => { pkg = pkg_ })
    .then(_ => updateContext(pkg.path))
    .then(_ => install())

  function install () {
    var packages

    if (cli.input && cli.input.length) {
      packages = cli.input
    } else {
      packages = assign({},
        pkg.pkg.dependencies || {},
        pkg.pkg.devDependencies || {})
    }

    return installMultiple(ctx,
      packages,
      join(ctx.root, 'node_modules'),
      cli.flags)
  }

  function updateContext (packageJson) {
    var root = dirname(packageJson)
    ctx.root = root
    ctx.store = join(root, 'node_modules', '.store')
    if (!cli.flags.quiet) { ctx.log = logger() }
    else { ctx.log = function () { return function () {} } }
  }
}

function logger () {
  return function (pkg) {
    var pkgData

    var t = observatory.add(pkg.name + ' ' +
      chalk.gray(pkg.rawSpec || ''))
      .status(chalk.yellow('·'))
    return status

    // log('resolved', pkgData)
    // log('downloading')
    // log('downloading', { done: 1, total: 200 })
    // log('depnedencies')
    // log('error', err)
    function status (status, args) {
      if (status === 'resolved') {
        pkgData = args
      } else if (status === 'downloading') {
        t.status(chalk.yellow('downloading ' + pkgData.version + ' ·'))
        if (args && args.total && args.done < args.total) {
          t.details('' + Math.round(args.done / args.total * 100) + '%')
        } else {
          t.details('')
        }
      } else if (status === 'done') {
        if (pkgData) {
          t.status(chalk.green('' + pkgData.version + ' ✓'))
            .details('')
        } else {
          t.status(chalk.green('OK ✓'))
            .details('')
        }
      } else if (status === 'dependencies') {
        t.status(chalk.gray('' + pkgData.version + ' ·'))
          .details('')
      } else if (status === 'error') {
        t.status(chalk.red('ERROR ✗'))
          .details(args && (args.message || args))
      } else if (status === 'stdout') {
        observatory.add(chalk.blue(args.name) + '  ' + chalk.gray(args.line))
      } else if (status === 'stderr') {
        observatory.add(chalk.blue(args.name) + '! ' + chalk.gray(args.line))
      } else {
        t.status(status)
          .details('')
      }
    }
  }
}

module.exports = run

if (!module.parent) run(cli).catch(require('../lib/err'))
