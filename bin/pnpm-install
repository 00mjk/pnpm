#!/usr/bin/env node
var debug = require('debug')('pnpm:install')
var dirname = require('path').dirname
var join = require('path').join
var chalk = require('chalk')

var mkdirp = require('../lib/mkdirp')
var getPath = require('../lib/get_path')
var installMultiple = require('../lib/install_multiple')
var Promise = require('../lib/promise')

const cli = require('meow')([
  'Usage:',
  '  $ pnpm install',
  '  $ pnpm install <name>',
  '',
  'Options:',
  '  -S, --save            save into package.json under dependencies',
  '  -D, --save-dev        save into package.json under devDependencies',
  '  -E, --save-exact      save exact spec',
  '',
  '      --dry-run         simulate',
  '  -g, --global          install globally',
  '',
  '      --production      don\'t install devDependencies',
  '      --quiet           don\'t print progress'
].join('\n'), {
  boolean: [ 'save-dev', 'save', 'save-exact', 'dry-run', 'global', 'quiet' ],
  alias: {
    'no-progress': 'quiet',
    D: 'save-dev',
    S: 'save',
    E: 'save-exact',
    g: 'global'
  }
})

/*
 * Perform
 */

function run (cli) {
  var observatory = require('observatory')
  observatory.settings({ prefix: '  ' })

  var ctx = {}

  return getPath()
    .then(path => updateContext(path))
    .then(_ => installMultiple(ctx, cli.input, join(ctx.root, 'node_modules'), cli.flags))

  function updateContext (root) {
    ctx.root = root
    ctx.tmp = join(root, 'node_modules', '.tmp')
    if (!cli.flags.quiet) { ctx.log = logger() }
    else { ctx.log = function () { return function () {} } }
  }

  function logger () {
    return function (pkg) {
      var pkgData

      var t = observatory.add(pkg.name + ' ' +
        chalk.gray(pkg.rawSpec || '*'))
        .status(chalk.yellow('·'))
      return status

      // log('resolved', pkgData)
      // log('downloading')
      // log('downloading', { done: 1, total: 200 })
      // log('depnedencies')
      // log('error', err)
      function status (status, args) {
        if (status === 'resolved') {
          pkgData = args
        } else if (status === 'downloading') {
          t.status(chalk.yellow('downloading ' + pkgData.version + ' ·'))
          if (args && args.done) {
            t.details('' + Math.round(args.done / args.total * 100) + '%')
          } else {
            t.details('')
          }
        } else if (status === 'done') {
          if (pkgData) {
            t.status(chalk.green('' + pkgData.version + ' ✓'))
              .details('')
          } else {
            t.status(chalk.green('OK ✓'))
              .details('')
          }
        } else if (status === 'dependencies') {
          t.status(chalk.gray('' + pkgData.version + ' ·'))
            .details('')
        } else {
          t.status(status)
            .details('')
        }
      }
    }
  }
}

module.exports = run

if (!module.parent) run(cli).catch(require('../lib/err'))
